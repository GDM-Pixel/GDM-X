---
import { Image } from "astro:assets";
import logoGDM from "../../../assets/img/logo-gdm-white.svg";
import NovaImage from "../../../assets/img/nova.png";
import LayoutBlogPost from "../../../layouts/LayoutBlogPost.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import AuthorBox from "../../../components/AuthorBox.astro";
import RelatedPosts from "../../../components/RelatedPosts.astro";
import { Breadcrumbs } from "astro-breadcrumbs";
import "astro-breadcrumbs/breadcrumbs.css";
export async function getStaticPaths() {
	const posts = await getCollection("articles");
	const paths = posts.map((post) => {
		return {
			params: {
				slug: post.slug,
			},
			props: {
				post,
			},
		};
	});

	return paths;
}

type Props = {
	post: CollectionEntry<"articles">;
};

const { post } = Astro.props;

const { Content, headings } = await post.render();

// Maintenant que `post` est défini, vous pouvez appeler `getRelatedPosts`
const category = post.data.category;
const relatedPosts = await getRelatedPosts(category, post.slug);

// @ts-ignore
export async function getRelatedPosts(category, currentSlug, limit = 6) {
	const allPosts = await getCollection("articles");
	// Filtrer les articles de la même catégorie et exclure l'article actuel par slug
	const relatedPosts = allPosts
		.filter(
			(post) => post.data.category === category && post.slug !== currentSlug,
		)
		.slice(0, limit);
	return relatedPosts;
}
---

<LayoutBlogPost
	title={post.data.metatitle}
	description={post.data.excerpt}
	ogimage={post.data.ogimage}>
	<Header />
	<div class="bd-container">
		<Breadcrumbs transition:persist>
			<svg
				slot="index"
				xmlns="http://www.w3.org/2000/svg"
				height="1em"
				viewBox="0 0 576 512">
				<path
					d="M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z"
				></path>
			</svg>
			<svg
				slot="separator"
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round">
				<polyline points="9 18 15 12 9 6"></polyline>
			</svg>
		</Breadcrumbs>
	</div>
	<main class="mt-6 mb-16 px-6">
		<div class="mx-auto flex max-w-5xl md:justify-between md:flex-row flex-col">
			<article class="md:w-[62%] w-full">
				<img
					src={post.data.ogimage}
					alt={post.data.title}
					width="795"
					height="445"
					transition:name={`featuredImg_${post.slug}`}
				/>

				<h1>{post.data.title}</h1>
				<div class="article-content prose prose-justify max-w-5xl">
					<Content />
				</div>
			</article>
			<aside class="md:w-[35%] w-full" transition:persist>
				<div class="novacontainer">
					<div class="novainner">
						<div class="header-nova-box">
							<Image
								src={logoGDM}
								width="230"
								height="40"
								alt="logo GDM-Pixel"
								loading="lazy"
							/>
						</div>
						<Image
							src={NovaImage}
							width="410"
							height="273"
							alt="Nova"
							loading="lazy"
						/>
						<p>Vous ne trouvez pas de réponse à votre question ?</p>
						<span class="ask">Demandez à NOVA</span>
						<button class="cta red" id="novabtn">Posez votre question</button>
					</div>
				</div>
			</aside>
		</div>

		<AuthorBox />

		<RelatedPosts relatedPosts={relatedPosts} />
	</main>
</LayoutBlogPost>
<Footer />

<script>
	function setup() {
		window.addEventListener("scroll", function () {
			var novacontainer = document.querySelector(".novacontainer");
			novacontainer?.classList.toggle("sticky", window.scrollY > 200);
		});
	}

	document.addEventListener("DOMContentLoaded", setup);
	document.addEventListener("astro:page-load", setup);
</script>
<style lang="scss">
	aside {
		@apply hidden md:block;
	}
	.novacontainer {
		@apply rounded-2xl overflow-hidden transition-all duration-300 ease-in-out opacity-100 translate-y-0;
		&.sticky {
			@apply top-0 transition-all mb-24 duration-300 ease-in-out opacity-95 md:translate-y-20 translate-y-12;
			position: sticky;
		}
	}
	.header-nova-box {
		@apply px-4 py-4 flex justify-center;
		img {
			@apply max-w-[200px];
		}
	}

	.novacontainer {
		@apply w-full rounded-lg relative self-start
		flex flex-col justify-start items-center text-white;
		.novainner {
			@apply pt-2 pb-8 bg-prussian-600 relative z-10 flex flex-col justify-center items-center self-center;
		}
		img {
			@apply w-full;
		}
		p {
			@apply px-4 py-2 text-center text-base;
		}
		.ask {
			@apply block text-center text-xl uppercase font-bold mb-4;
		}
	}

	.glow::before,
	.glow::after {
		content: "";
		position: absolute;
		left: -2px;
		top: -2px;

		background: linear-gradient(
			45deg,
			#0dffd7,
			#0c67fa,
			#217eff,
			#00e1ff,
			#cff7ff,
			#23e9ff,
			#0055ff,
			#00d4f5,
			#0dffd7
		);
		background-size: 400%;
		width: calc(100% + 4px);
		height: calc(100% + 4px);

		animation: animate 60s linear infinite;
	}
	@keyframes animate {
		0% {
			background-position: 0 0;
		}
		50% {
			background-position: 300% 0;
		}
		100% {
			background-position: 0 0;
		}
	}
	.glow:after {
		filter: blur(15px);
		opacity: 0.5;
	}
	.prose-justify {
		text-align: justify;
	}
</style>
